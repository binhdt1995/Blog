<?php

namespace Abit\Blog\Model\ResourceModel;

use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Magento\Framework\Model\ResourceModel\Db\Context;

class Post extends AbstractDb
{
    public function __construct(Context $context)
    {
        parent::__construct($context);
    }

    /**
     * @inheritDoc
     */
    protected function _construct()
    {
        $this->_init('aw_blog', 'post_id');
    }

    protected function _afterLoad(AbstractModel $object)
    {
        if ($object->getId()) {
            $category_id = $this->lookupCategories($object->getId());
            $object->setData('cat_id', $category_id);
            $store_id = $this->lookupStoreIds($object->getId());
            $object->setData('store_id', $store_id);
        }
        return parent::_afterLoad($object); // TODO: Change the autogenerated stub
    }

    protected function _afterSave(\Magento\Framework\Model\AbstractModel $object)
    {
        $this->saveCategoryIds($object);
        $this->saveStoreIds($object);

        return parent::_afterSave($object); // TODO: Change the autogenerated stub
    }

    public function lookupCategories($postId)
    {
        $connection = $this->getConnection();
        $select = $connection->select()->from(
            $this->getTable('aw_blog_post_cat'),
            'cat_id'
        )->where(
            'post_id = ?',
            (int)$postId
        );
        return $connection->fetchCol($select);
    }

    public function lookupStoreIds($postId)
    {
        $connection = $this->getConnection();
        $select = $connection->select()->from(
            $this->getTable('aw_blog_store'),
            'store_id'
        )->where(
            'post_id = ?',
            (int)$postId
        );
        return $connection->fetchCol($select);
    }

    private function saveCategoryIds($object)
    {
        $catIds = $object->getCats();
        if (empty($catIds)) {
            $catIds = [];
        }
        $oldCategory = $this->lookupCategories($object->getId());
        $table = $this->getTable('aw_blog_post_cat');

        $insert = array_diff($catIds, $oldCategory);
        $delete = array_diff($catIds, $oldCategory);

        if ($delete) {
            $where = ['post_id = ?' => (int)$object->getId(), 'cat_id IN (?)' => $delete];
            $this->getConnection()->delete($table, $where);
        }

        if ($insert) {
            $data = [];
            foreach ($insert as $catId) {
                $data[] = ['post_id' => (int)$object->getId(), 'cat_id' => (int)$catId];
            }
            $this->getConnection()->insertMultiple($table, $data);
        }

        return $this;
    }
    private function saveStoreIds($object)
    {
        $newStoreIds = $object->getStore();
        if (empty($newStoreIds)) {
            $newStoreIds = (array)$object->getStoreId();
        }
        $oldStoreIds = $this->lookupStoreIds($object->getId());
        $table = $this->getTable('aw_blog_store');

        $insert = array_diff($newStoreIds, $oldStoreIds);
        $delete = array_diff($newStoreIds, $oldStoreIds);

        if ($delete) {
            $where = ['post_id = ?' => (int)$object->getId(), 'store_id IN (?)' => $delete];
            $this->getConnection()->delete($table, $where);
        }

        if ($insert) {
            $data = [];
            foreach ($insert as $catId) {
                $data[] = ['post_id' => (int)$object->getId(), 'store_id' => (int)$catId];
            }
            $this->getConnection()->insertMultiple($table, $data);
        }

        return $this;
    }
}
